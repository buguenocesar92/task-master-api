name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_pgsql, zip, exif, pcntl, bcmath, gd

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Execute tests
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: vendor/bin/phpunit

  build:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check Required Secrets
        run: |
          # Lista de secretos requeridos para el despliegue seguro
          echo "üîê Verificando secretos de GitHub requeridos..."

          # Verificar APP_KEY
          if [[ -z "${{ secrets.APP_KEY }}" ]]; then
            echo "‚ö†Ô∏è ADVERTENCIA: El secreto APP_KEY no est√° configurado."
            echo "   - APP_KEY es cr√≠tico para la encriptaci√≥n de datos. Puedes generarla con: php artisan key:generate --show"
            echo "   - Se usar√° una APP_KEY temporal, pero esto puede causar p√©rdida de datos encriptados en despliegues futuros."
          fi

          # Verificar APP_ENV
          if [[ -z "${{ secrets.APP_ENV }}" ]]; then
            echo "‚ö†Ô∏è ADVERTENCIA: El secreto APP_ENV no est√° configurado."
            echo "   - APP_ENV determina el entorno de la aplicaci√≥n. Recomendamos usar 'production' para entornos de producci√≥n."
            echo "   - Se usar√° 'production' como valor predeterminado."
          fi

          # Verificar APP_DEBUG
          if [[ -z "${{ secrets.APP_DEBUG }}" ]]; then
            echo "‚ö†Ô∏è ADVERTENCIA: El secreto APP_DEBUG no est√° configurado."
            echo "   - APP_DEBUG controla si se muestran errores detallados. Debe ser 'false' en producci√≥n por seguridad."
            echo "   - Se usar√° 'false' como valor predeterminado."
          fi

          # Verificar RDS_HOST
          if [[ -z "${{ secrets.RDS_HOST }}" ]]; then
            echo "‚ö†Ô∏è ADVERTENCIA: El secreto RDS_HOST no est√° configurado."
            echo "   - Este secreto es necesario para la conexi√≥n a la base de datos PostgreSQL. Sin √©l, la aplicaci√≥n no funcionar√°."
          fi

          # Verificar RDS_DATABASE
          if [[ -z "${{ secrets.RDS_DATABASE }}" ]]; then
            echo "‚ö†Ô∏è ADVERTENCIA: El secreto RDS_DATABASE no est√° configurado."
            echo "   - Este secreto es necesario para la conexi√≥n a la base de datos PostgreSQL. Sin √©l, la aplicaci√≥n no funcionar√°."
          fi

          # Verificar RDS_USERNAME
          if [[ -z "${{ secrets.RDS_USERNAME }}" ]]; then
            echo "‚ö†Ô∏è ADVERTENCIA: El secreto RDS_USERNAME no est√° configurado."
            echo "   - Este secreto es necesario para la conexi√≥n a la base de datos PostgreSQL. Sin √©l, la aplicaci√≥n no funcionar√°."
          fi

          # Verificar RDS_PASSWORD
          if [[ -z "${{ secrets.RDS_PASSWORD }}" ]]; then
            echo "‚ö†Ô∏è ADVERTENCIA: El secreto RDS_PASSWORD no est√° configurado."
            echo "   - Este secreto es necesario para la conexi√≥n a la base de datos PostgreSQL. Sin √©l, la aplicaci√≥n no funcionar√°."
          fi

          # Verificar APP_URL
          if [[ -z "${{ secrets.APP_URL }}" ]]; then
            echo "‚ö†Ô∏è ADVERTENCIA: El secreto APP_URL no est√° configurado."
            echo "   - APP_URL debe ser la URL completa donde se accede a la aplicaci√≥n. Ej: https://ejemplo.com"
            echo "   - Se usar√° http://localhost:8080 como valor predeterminado."
          fi

          # Resumen
          MISSING_COUNT=$([[ -z "${{ secrets.APP_KEY }}" ]] && echo -n "1" || echo -n "0")
          MISSING_COUNT=$((MISSING_COUNT + $([[ -z "${{ secrets.APP_ENV }}" ]] && echo -n "1" || echo -n "0")))
          MISSING_COUNT=$((MISSING_COUNT + $([[ -z "${{ secrets.APP_DEBUG }}" ]] && echo -n "1" || echo -n "0")))
          MISSING_COUNT=$((MISSING_COUNT + $([[ -z "${{ secrets.RDS_HOST }}" ]] && echo -n "1" || echo -n "0")))
          MISSING_COUNT=$((MISSING_COUNT + $([[ -z "${{ secrets.RDS_DATABASE }}" ]] && echo -n "1" || echo -n "0")))
          MISSING_COUNT=$((MISSING_COUNT + $([[ -z "${{ secrets.RDS_USERNAME }}" ]] && echo -n "1" || echo -n "0")))
          MISSING_COUNT=$((MISSING_COUNT + $([[ -z "${{ secrets.RDS_PASSWORD }}" ]] && echo -n "1" || echo -n "0")))
          MISSING_COUNT=$((MISSING_COUNT + $([[ -z "${{ secrets.APP_URL }}" ]] && echo -n "1" || echo -n "0")))

          if [[ $MISSING_COUNT -gt 0 ]]; then
            echo ""
            echo "‚ö†Ô∏è ADVERTENCIA: Se detectaron ${MISSING_COUNT} secretos faltantes."
            echo "Por favor, configura todos los secretos en GitHub: Settings > Secrets and variables > Actions"
            echo ""
          else
            echo "‚úÖ Todos los secretos requeridos est√°n configurados correctamente."
          fi

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Configurar variables
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"

            # Configurar ECR
            ECR_ACCOUNT="${{ secrets.AWS_ACCOUNT_ID }}"
            ECR_REGION="${{ secrets.AWS_REGION }}"
            ECR_URL="${ECR_ACCOUNT}.dkr.ecr.${ECR_REGION}.amazonaws.com"
            REPO_NAME="${{ secrets.AWS_ECR_REPOSITORY }}"
            REPO_URL="${ECR_URL}/${REPO_NAME}"

            # Configurar variables de entorno desde secretos de GitHub
            # APP_KEY (preferiblemente desde secretos)
            if [[ -n "${{ secrets.APP_KEY }}" ]]; then
              APP_KEY="${{ secrets.APP_KEY }}"
              echo "Usando APP_KEY configurada en secretos de GitHub"
            else
              APP_KEY="base64:$(openssl rand -base64 32)"
              echo "‚ö†Ô∏è ADVERTENCIA: Generada APP_KEY temporal: $APP_KEY"
              echo "‚ö†Ô∏è IMPORTANTE: Configura esta clave como secreto APP_KEY en GitHub para futuros despliegues"
            fi

            # APP_ENV (preferiblemente desde secretos)
            if [[ -n "${{ secrets.APP_ENV }}" ]]; then
              APP_ENV="${{ secrets.APP_ENV }}"
              echo "Usando APP_ENV configurado en secretos de GitHub: $APP_ENV"
            else
              APP_ENV="production"
              echo "‚ö†Ô∏è ADVERTENCIA: Usando APP_ENV predeterminado: $APP_ENV"
            fi

            # APP_DEBUG (preferiblemente desde secretos)
            if [[ -n "${{ secrets.APP_DEBUG }}" ]]; then
              APP_DEBUG="${{ secrets.APP_DEBUG }}"
              echo "Usando APP_DEBUG configurado en secretos de GitHub: $APP_DEBUG"
            else
              APP_DEBUG="false"
              echo "‚ö†Ô∏è ADVERTENCIA: Usando APP_DEBUG predeterminado: $APP_DEBUG"
            fi

            # APP_URL (preferiblemente desde secretos)
            if [[ -n "${{ secrets.APP_URL }}" ]]; then
              APP_URL="${{ secrets.APP_URL }}"
              echo "Usando APP_URL configurado en secretos de GitHub: $APP_URL"
            else
              APP_URL="http://localhost:8080"
              echo "‚ö†Ô∏è ADVERTENCIA: Usando APP_URL predeterminado: $APP_URL"
            fi

            # Login a ECR
            echo "Iniciando sesi√≥n en ECR..."
            aws ecr get-login-password --region ${ECR_REGION} | docker login --username AWS --password-stdin ${ECR_URL}

            # Pull de la imagen
            echo "Descargando imagen: ${REPO_URL}:latest"
            docker pull ${REPO_URL}:latest

            # Crear directorio para archivos de la aplicaci√≥n
            mkdir -p ~/app-files/public
            mkdir -p ~/app-files/storage/framework/sessions
            mkdir -p ~/app-files/storage/framework/views
            mkdir -p ~/app-files/storage/framework/cache
            mkdir -p ~/app-files/storage/logs
            mkdir -p ~/app-files/bootstrap/cache

            # Crear un archivo test.php simple en la carpeta p√∫blica
            echo "<?php echo 'Hello from Laravel Test File!'; ?>" > ~/app-files/public/test.php
            chmod 755 ~/app-files/public/test.php

            # Reemplazar docker-compose.yml completamente con una versi√≥n simplificada
            cat > ~/docker-compose.yml << EOF
            version: '3.8'

            services:
              # PHP Application
              app:
                image: ${REPO_URL}:latest
                container_name: laravel-api-app
                restart: unless-stopped
                volumes:
                  - app-storage:/var/www/html/storage
                  - app-public:/var/www/html/public
                networks:
                  - laravel-network
                depends_on:
                  - redis
                environment:
                  # Variables de entorno de la aplicaci√≥n (todas desde secretos de GitHub)
                  APP_NAME: "Laravel"
                  APP_ENV: "${APP_ENV}"
                  APP_KEY: "${APP_KEY}"
                  APP_DEBUG: "${APP_DEBUG}"
                  APP_URL: "${APP_URL}"

                  # Variables de log
                  LOG_CHANNEL: "stack"
                  LOG_DEPRECATIONS_CHANNEL: "null"
                  LOG_LEVEL: "debug"

                  # Configuraci√≥n PostgreSQL (desde secretos de GitHub)
                  DB_CONNECTION: "pgsql"
                  DB_HOST: "${{ secrets.RDS_HOST }}"
                  DB_PORT: "5432"
                  DB_DATABASE: "${{ secrets.RDS_DATABASE }}"
                  DB_USERNAME: "${{ secrets.RDS_USERNAME }}"
                  DB_PASSWORD: "${{ secrets.RDS_PASSWORD }}"

                  # Configuraci√≥n de servicios
                  BROADCAST_DRIVER: "log"
                  CACHE_DRIVER: "file"
                  FILESYSTEM_DISK: "local"
                  QUEUE_CONNECTION: "sync"
                  SESSION_DRIVER: "file"
                  SESSION_LIFETIME: "120"

                  # Redis
                  REDIS_HOST: "redis"
                  REDIS_PASSWORD: "null"
                  REDIS_PORT: "6379"

              # Nginx Web Server
              nginx:
                image: nginx:alpine
                container_name: laravel-api-nginx
                restart: unless-stopped
                ports:
                  - "8080:80"
                volumes:
                  - ./nginx/conf.d:/etc/nginx/conf.d
                  - app-public:/var/www/html/public
                networks:
                  - laravel-network
                depends_on:
                  - app

              # Redis for Cache and Queue
              redis:
                image: redis:alpine
                container_name: laravel-api-redis
                restart: unless-stopped
                networks:
                  - laravel-network
                volumes:
                  - redis-data:/data

            # Volumes
            volumes:
              redis-data:
                driver: local
              app-storage:
                driver: local
              app-public:
                driver: local

            # Networks
            networks:
              laravel-network:
                driver: bridge
            EOF

            # Crear una configuraci√≥n Nginx sencilla que funcione
            mkdir -p ~/nginx/conf.d
            cat > ~/nginx/conf.d/default.conf << EOF
            server {
                listen 80;
                index index.php index.html;
                server_name _;
                error_log  /var/log/nginx/error.log;
                access_log /var/log/nginx/access.log;
                root /var/www/html/public;

                location / {
                    try_files \$uri \$uri/ /index.php?\$query_string;
                }

                location ~ \.php$ {
                    try_files \$uri =404;
                    fastcgi_split_path_info ^(.+\.php)(/.+)$;
                    fastcgi_pass app:9000;
                    fastcgi_index index.php;
                    include fastcgi_params;
                    fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                    fastcgi_param PATH_INFO \$fastcgi_path_info;
                }
            }
            EOF

            # Iniciar contenedores con la nueva configuraci√≥n
            docker-compose down --remove-orphans
            docker-compose up -d

            # Esperar a que los contenedores est√©n listos
            echo "Esperando a que los contenedores est√©n listos..."
            sleep 15

            # Asegurarse de que las carpetas existen y tienen permisos correctos
            docker exec laravel-api-app sh -c "mkdir -p /var/www/html/storage/framework/sessions /var/www/html/storage/framework/views /var/www/html/storage/framework/cache /var/www/html/bootstrap/cache"
            docker exec laravel-api-app sh -c "chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache"
            docker exec laravel-api-app sh -c "chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache"

            # Crear archivo .env para asegurar la correcta configuraci√≥n
            echo "Creando archivo .env con configuraci√≥n desde secretos de GitHub..."
            docker exec laravel-api-app sh -c 'cat > /var/www/html/.env << "EOF"
            APP_NAME=Laravel
            APP_ENV='${APP_ENV}'
            APP_KEY='${APP_KEY}'
            APP_DEBUG='${APP_DEBUG}'
            APP_URL='${APP_URL}'

            LOG_CHANNEL=stack
            LOG_LEVEL=debug

            DB_CONNECTION=pgsql
            DB_HOST=${{ secrets.RDS_HOST }}
            DB_PORT=5432
            DB_DATABASE=${{ secrets.RDS_DATABASE }}
            DB_USERNAME=${{ secrets.RDS_USERNAME }}
            DB_PASSWORD=${{ secrets.RDS_PASSWORD }}

            BROADCAST_DRIVER=log
            CACHE_DRIVER=file
            FILESYSTEM_DISK=local
            QUEUE_CONNECTION=sync
            SESSION_DRIVER=file
            SESSION_LIFETIME=120

            REDIS_HOST=redis
            REDIS_PASSWORD=null
            REDIS_PORT=6379
            EOF'

            # Verificar que las extensiones PHP para PostgreSQL est√©n instaladas
            echo "Verificando extensiones PHP requeridas..."
            if ! docker exec laravel-api-app php -m | grep -q pdo_pgsql; then
              echo "¬°ALERTA! La extensi√≥n pdo_pgsql no est√° instalada. Instalando..."
              docker exec laravel-api-app sh -c "apt-get update && apt-get install -y libpq-dev && docker-php-ext-install pdo_pgsql"
            fi

            # Limpiar cach√©s de Laravel para asegurar la carga correcta
            echo "Limpiando cach√©s de Laravel..."
            docker exec laravel-api-app php /var/www/html/artisan optimize:clear

            # Verificar sintaxis de archivos PHP cr√≠ticos
            echo "Verificando sintaxis de archivos PHP cr√≠ticos..."
            docker exec laravel-api-app sh -c 'find /var/www/html/routes -name "*.php" -exec php -l {} \;'

            # Si hay alg√∫n error de sintaxis en rutas, reemplazar con versi√≥n b√°sica funcional
            if ! docker exec laravel-api-app php -l /var/www/html/routes/web.php > /dev/null; then
              echo "¬°ATENCI√ìN! Error de sintaxis en web.php. Corrigiendo con versi√≥n b√°sica..."
              docker exec laravel-api-app sh -c 'cat > /var/www/html/routes/web.php << "EOF"
            <?php

            use Illuminate\Support\Facades\Route;

            /*
            |--------------------------------------------------------------------------
            | Web Routes
            |--------------------------------------------------------------------------
            */

            Route::get("/", function() {
                return "Aplicaci√≥n Laravel desplegada correctamente";
            });

            Route::get("/test-route", function() {
                return "Esta es una ruta de prueba en Laravel - Deployment autom√°tico";
            });
            EOF'
            fi

            # Asegurar que existan directorios de logs y tengan permisos correctos
            docker exec laravel-api-app sh -c 'mkdir -p /var/www/html/storage/logs'
            docker exec laravel-api-app sh -c 'touch /var/www/html/storage/logs/laravel.log'
            docker exec laravel-api-app sh -c 'chmod 777 /var/www/html/storage/logs/laravel.log'

            # Verificar que los archivos cr√≠ticos existen
            echo "Contenido del directorio public:"
            docker exec laravel-api-app ls -la /var/www/html/public/

            # Verificar que Nginx puede acceder a los archivos del directorio public
            echo "Verificando que Nginx puede acceder a los archivos p√∫blicos:"
            docker exec laravel-api-nginx ls -la /var/www/html/public/

            # Corregir permisos de archivos cr√≠ticos
            echo "Configurando permisos correctos..."
            docker exec laravel-api-app sh -c "chmod -R 755 /var/www/html/public"
            docker exec laravel-api-app sh -c "chown -R www-data:www-data /var/www/html/storage"
            docker exec laravel-api-app sh -c "chown -R www-data:www-data /var/www/html/bootstrap/cache"

            # Reiniciar Nginx para aplicar todos los cambios
            docker restart laravel-api-nginx

            # Crear tabla de migraciones si no existe
            echo "Creando tabla de migraciones en la base de datos..."
            docker exec -w /var/www/html laravel-api-app sh -c 'php artisan migrate:install --no-interaction'

            # Verificar que los contenedores est√©n en ejecuci√≥n
            echo "Verificando estado de los contenedores..."
            docker ps

            # Ejecutar migraciones
            echo "Ejecutando migraciones en la base de datos..."
            docker exec -w /var/www/html laravel-api-app php artisan migrate --force

            # Verificar la conexi√≥n a la base de datos
            echo "Verificando conexi√≥n a la base de datos..."
            docker exec -it laravel-api-app php -r "try { \$pdo = new PDO('pgsql:host=${{ secrets.RDS_HOST }};dbname=${{ secrets.RDS_DATABASE }}', '${{ secrets.RDS_USERNAME }}', '${{ secrets.RDS_PASSWORD }}'); echo 'Conexi√≥n exitosa a PostgreSQL'; } catch(PDOException \$e) { echo 'Error de conexi√≥n: ' . \$e->getMessage(); }"

            # Regenerar el cach√© de configuraci√≥n despu√©s de todo
            echo "Regenerando cach√©s..."
            docker exec -w /var/www/html laravel-api-app php artisan config:cache
            docker exec -w /var/www/html laravel-api-app php artisan route:cache

            # Probar que la aplicaci√≥n responde
            echo "Probando que la aplicaci√≥n responde:"
            curl -v http://localhost:8080/

            # Mensaje de √©xito con instrucciones
            echo "Despliegue completado con √©xito!"
            echo "Prueba la aplicaci√≥n en: ${APP_URL}"
