name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_mysql, zip, exif, pcntl, bcmath, gd

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Execute tests
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: vendor/bin/phpunit

  build:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.EC2_HOST }}
          REMOTE_USER: ${{ secrets.EC2_USERNAME }}
          REMOTE_PORT: "22"
          SOURCE: "task-master-api/docker-compose.yml"
          TARGET: "/home/${{ secrets.EC2_USERNAME }}"
          SCRIPT_BEFORE: |
            echo "Starting deployment..."
          SCRIPT_AFTER: |
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}

            # Configurar ECR
            ECR_ACCOUNT=${{ secrets.AWS_ACCOUNT_ID }}
            ECR_REGION=${{ secrets.AWS_REGION }}
            ECR_URL="${ECR_ACCOUNT}.dkr.ecr.${ECR_REGION}.amazonaws.com"
            REPO_NAME="${{ secrets.AWS_ECR_REPOSITORY }}"
            REPO_URL="${ECR_URL}/${REPO_NAME}"

            # Login a ECR
            echo "Iniciando sesión en ECR..."
            aws ecr get-login-password --region ${ECR_REGION} | docker login --username AWS --password-stdin ${ECR_URL}

            # Pull de la imagen
            echo "Descargando imagen: ${REPO_URL}:latest"
            docker pull ${REPO_URL}:latest

            # Crear .env
            echo "ECR_REPOSITORY_URI=${REPO_URL}" > .env
            echo "DB_DATABASE=${{ secrets.RDS_DATABASE }}" >> .env
            echo "DB_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> .env
            echo "DB_USERNAME=${{ secrets.RDS_USERNAME }}" >> .env
            echo "DB_HOST=${{ secrets.RDS_HOST }}" >> .env

            # Iniciar contenedores
            echo "Iniciando contenedores..."
            docker-compose down
            docker-compose up -d

            # Verificar
            echo "Estado de los contenedores:"
            docker ps

            # Ejecutar migraciones si el contenedor está corriendo
            if docker ps | grep -q app; then
              docker-compose exec -T app php artisan migrate --force
              docker-compose exec -T app php artisan config:cache
              docker-compose exec -T app php artisan route:cache
              docker-compose exec -T app php artisan view:cache
              echo "Despliegue completado con éxito!"
            else
              echo "ERROR: El contenedor app no está ejecutándose"
              docker-compose logs app
              exit 1
            fi
