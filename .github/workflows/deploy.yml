name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_mysql, zip, exif, pcntl, bcmath, gd

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Execute tests
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: vendor/bin/phpunit

  build:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up SSH key
        run: |
          # Diagnosticar el entorno
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Home directory: $HOME"

          # Usar directorio temporal en lugar de ~/.ssh
          SSH_DIR="$(pwd)/ssh_temp"
          mkdir -p $SSH_DIR
          echo "SSH directory: $SSH_DIR"

          # Configurar clave SSH
          echo "${{ secrets.EC2_SSH_KEY }}" > $SSH_DIR/ec2_key.pem
          chmod 600 $SSH_DIR/ec2_key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> $SSH_DIR/known_hosts

          # Verificar archivos creados
          ls -la $SSH_DIR

      - name: Deploy to EC2 with direct SSH
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          RDS_DATABASE: ${{ secrets.RDS_DATABASE }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_HOST: ${{ secrets.RDS_HOST }}
        run: |
          # Definir directorio SSH
          SSH_DIR="$(pwd)/ssh_temp"

          # Crear script de despliegue
          cat > deploy.sh << 'EOSCRIPT'
          #!/bin/bash
          set -e

          # Configurar variables
          ECR_ACCOUNT="$AWS_ACCOUNT_ID"
          ECR_REGION="$AWS_REGION"
          ECR_URL="${ECR_ACCOUNT}.dkr.ecr.${ECR_REGION}.amazonaws.com"
          REPO_NAME="$AWS_ECR_REPOSITORY"
          REPO_URL="${ECR_URL}/${REPO_NAME}"

          # Exportar credenciales AWS
          export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
          export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
          export AWS_DEFAULT_REGION="$AWS_REGION"

          # Login a ECR
          echo "Iniciando sesión en ECR..."
          aws ecr get-login-password --region ${ECR_REGION} | docker login --username AWS --password-stdin ${ECR_URL}

          # Pull de la imagen
          echo "Descargando imagen: ${REPO_URL}:latest"
          docker pull ${REPO_URL}:latest

          # Crear .env
          echo "ECR_REPOSITORY_URI=${REPO_URL}" > .env
          echo "DB_DATABASE=$RDS_DATABASE" >> .env
          echo "DB_PASSWORD=$RDS_PASSWORD" >> .env
          echo "DB_USERNAME=$RDS_USERNAME" >> .env
          echo "DB_HOST=$RDS_HOST" >> .env

          # Crear docker-compose.yml
          cat > docker-compose.yml << 'EOF'
          version: '3.8'

          services:
            # PHP Application
            app:
              image: ${ECR_REPOSITORY_URI}:latest
              container_name: laravel-api-app
              restart: unless-stopped
              working_dir: /var/www/html
              networks:
                - laravel-network
              depends_on:
                - db
                - redis

            # Nginx Web Server
            nginx:
              image: nginx:alpine
              container_name: laravel-api-nginx
              restart: unless-stopped
              ports:
                - "8080:80"
              networks:
                - laravel-network
              depends_on:
                - app

            # MySQL Database
            db:
              image: mysql:8.0
              container_name: laravel-api-db
              restart: unless-stopped
              environment:
                MYSQL_DATABASE: ${DB_DATABASE:-laravel}
                MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-password}
                MYSQL_PASSWORD: ${DB_PASSWORD:-password}
                MYSQL_USER: ${DB_USERNAME:-laravel}
                SERVICE_TAGS: dev
                SERVICE_NAME: mysql
              volumes:
                - mysql-data:/var/lib/mysql
              networks:
                - laravel-network
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-p${DB_PASSWORD:-password}"]
                retries: 3
                timeout: 5s

            # Redis for Cache and Queue
            redis:
              image: redis:alpine
              container_name: laravel-api-redis
              restart: unless-stopped
              networks:
                - laravel-network
              volumes:
                - redis-data:/data

            # PHPMyAdmin for Database Management
            phpmyadmin:
              image: phpmyadmin/phpmyadmin
              container_name: laravel-api-phpmyadmin
              restart: unless-stopped
              ports:
                - "8081:80"
              environment:
                PMA_HOST: db
                MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-password}
              networks:
                - laravel-network
              depends_on:
                - db

          # Volumes
          volumes:
            mysql-data:
              driver: local
            redis-data:
              driver: local

          # Networks
          networks:
            laravel-network:
              driver: bridge
          EOF

          # Iniciar contenedores
          echo "Iniciando contenedores..."
          docker-compose down
          docker-compose up -d

          # Verificar
          echo "Estado de los contenedores:"
          docker ps

          # Ejecutar migraciones si el contenedor está corriendo
          if docker ps | grep -q app; then
            docker-compose exec -T app php artisan migrate --force
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache
            echo "Despliegue completado con éxito!"
          else
            echo "ERROR: El contenedor app no está ejecutándose"
            docker-compose logs app
            exit 1
          fi
          EOSCRIPT

          # Transferir y ejecutar script en el servidor
          chmod +x deploy.sh
          scp -i $SSH_DIR/ec2_key.pem -o UserKnownHostsFile=$SSH_DIR/known_hosts -o StrictHostKeyChecking=no -o ConnectTimeout=30 deploy.sh ${EC2_USERNAME}@${EC2_HOST}:~/
          ssh -i $SSH_DIR/ec2_key.pem -o UserKnownHostsFile=$SSH_DIR/known_hosts -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${EC2_USERNAME}@${EC2_HOST} "chmod +x ~/deploy.sh && ~/deploy.sh"
