name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, intl, pdo_mysql, zip, exif, pcntl, bcmath, gd

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Execute tests
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: vendor/bin/phpunit

  build:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    name: Deploy to EC2
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Configurar variables
            export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
            export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            export AWS_DEFAULT_REGION="${{ secrets.AWS_REGION }}"

            # Configurar ECR
            ECR_ACCOUNT="${{ secrets.AWS_ACCOUNT_ID }}"
            ECR_REGION="${{ secrets.AWS_REGION }}"
            ECR_URL="${ECR_ACCOUNT}.dkr.ecr.${ECR_REGION}.amazonaws.com"
            REPO_NAME="${{ secrets.AWS_ECR_REPOSITORY }}"
            REPO_URL="${ECR_URL}/${REPO_NAME}"

            # Login a ECR
            echo "Iniciando sesión en ECR..."
            aws ecr get-login-password --region ${ECR_REGION} | docker login --username AWS --password-stdin ${ECR_URL}

            # Pull de la imagen
            echo "Descargando imagen: ${REPO_URL}:latest"
            docker pull ${REPO_URL}:latest

            # Crear archivo de configuración nginx
            mkdir -p ~/nginx/conf.d
            cat > ~/nginx/conf.d/default.conf << EOF
            server {
                listen 80;
                index index.php index.html;
                error_log  /var/log/nginx/error.log;
                access_log /var/log/nginx/access.log;
                root /var/www/html/public;

                location ~ \.php$ {
                    try_files \$uri =404;
                    fastcgi_split_path_info ^(.+\.php)(/.+)$;
                    fastcgi_pass app:9000;
                    fastcgi_index index.php;
                    include fastcgi_params;
                    fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                    fastcgi_param PATH_INFO \$fastcgi_path_info;
                }

                location / {
                    try_files \$uri \$uri/ /index.php?\$query_string;
                    gzip_static on;
                }
            }
            EOF

            # Crear docker-compose.yml simplificado
            cat > ~/docker-compose.yml << EOF
            version: '3.8'

            services:
              # PHP Application
              app:
                image: ${REPO_URL}:latest
                container_name: laravel-api-app
                restart: unless-stopped
                networks:
                  - laravel-network
                depends_on:
                  - db
                  - redis
                environment:
                  DB_HOST: db
                  DB_PORT: 3306
                  DB_DATABASE: ${{ secrets.RDS_DATABASE }}
                  DB_USERNAME: ${{ secrets.RDS_USERNAME }}
                  DB_PASSWORD: ${{ secrets.RDS_PASSWORD }}
                  REDIS_HOST: redis
                  APP_ENV: production
                  APP_DEBUG: "false"
                  APP_KEY: ${{ secrets.APP_KEY }}

              # Nginx Web Server
              nginx:
                image: nginx:alpine
                container_name: laravel-api-nginx
                restart: unless-stopped
                ports:
                  - "8080:80"
                volumes:
                  - ./nginx/conf.d:/etc/nginx/conf.d
                networks:
                  - laravel-network
                depends_on:
                  - app

              # MySQL Database
              db:
                image: mysql:8.0
                container_name: laravel-api-db
                restart: unless-stopped
                environment:
                  MYSQL_DATABASE: ${{ secrets.RDS_DATABASE }}
                  MYSQL_ROOT_PASSWORD: ${{ secrets.RDS_PASSWORD }}
                  MYSQL_PASSWORD: ${{ secrets.RDS_PASSWORD }}
                  MYSQL_USER: ${{ secrets.RDS_USERNAME }}
                volumes:
                  - mysql-data:/var/lib/mysql
                networks:
                  - laravel-network

              # Redis for Cache and Queue
              redis:
                image: redis:alpine
                container_name: laravel-api-redis
                restart: unless-stopped
                networks:
                  - laravel-network
                volumes:
                  - redis-data:/data

              # PHPMyAdmin for Database Management
              phpmyadmin:
                image: phpmyadmin/phpmyadmin
                container_name: laravel-api-phpmyadmin
                restart: unless-stopped
                ports:
                  - "8081:80"
                environment:
                  PMA_HOST: db
                  MYSQL_ROOT_PASSWORD: ${{ secrets.RDS_PASSWORD }}
                networks:
                  - laravel-network
                depends_on:
                  - db

            # Volumes
            volumes:
              mysql-data:
                driver: local
              redis-data:
                driver: local

            # Networks
            networks:
              laravel-network:
                driver: bridge
            EOF

            # Iniciar contenedores
            cd ~

            # Detener todos los contenedores existentes
            echo "Limpiando contenedores existentes..."
            docker-compose down || true
            docker stop $(docker ps -aq) || true
            docker rm $(docker ps -aq) || true

            # Limpiar también el entorno de prueba si existe
            if [ -d ~/simple-test ]; then
              cd ~/simple-test
              docker-compose down || true
              cd ~
            fi

            # Verificar si el docker-compose.yml es válido
            echo "Validando docker-compose.yml..."
            docker-compose config

            echo "Iniciando nuevos contenedores..."
            docker-compose up -d

            # Esperar a que los contenedores estén listos
            echo "Esperando a que los contenedores estén listos..."
            sleep 15

            # Verificar que los contenedores estén en ejecución
            echo "Verificando estado de los contenedores..."
            docker ps

            # Verificar si el contenedor laravel-api-app existe antes de ejecutar migraciones
            if docker ps -q --filter "name=laravel-api-app" | grep -q .; then
              echo "Ejecutando migraciones..."
              docker exec -w /var/www/html laravel-api-app php artisan migrate --force
            else
              echo "ERROR: El contenedor laravel-api-app no está en ejecución. Verificando logs..."
              docker-compose logs app
              echo "Mostrando contenedores en ejecución:"
              docker ps -a
            fi

            echo "Despliegue completado con éxito!"
